{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["TodoList","todos","selectUser","filterByTitle","filterByCompleted","className","type","onChange","event","target","value","map","todo","completed","key","checked","readOnly","title","onClick","userId","CurrentUser","user","onClear","id","name","email","phone","getTodos","fetch","then","response","json","getUser","App","state","preparedTodos","selectedUserId","componentDidMount","setState","data","componentDidUpdate","query","filter","includes","this","onComplete","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.861da4cf.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  selectUser,\n  filterByTitle,\n  filterByCompleted,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <input\n        type=\"text\"\n        onChange={event => filterByTitle(event.target.value)}\n      />\n      <select onChange={filterByCompleted}>\n        <option value=\"all\">\n          All\n        </option>\n        <option value=\"active\">\n          Active\n        </option>\n        <option value=\"completed\">\n          Completed\n        </option>\n      </select>\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            className={todo.completed\n              ? 'TodoList__item TodoList__item--checked'\n              : 'TodoList__item TodoList__item--unchecked'\n            }\n            key={todo}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                button\n              \"\n              type=\"button\"\n              onClick={() => selectUser(todo.userId)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  filterByTitle: PropTypes.func.isRequired,\n  filterByCompleted: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\n\nexport const CurrentUser = ({ user, onClear }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Selected user:\n        {user.id}\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">{user.name}</h3>\n    <p className=\"CurrentUser__email\">{user.email}</p>\n    <p className=\"CurrentUser__phone\">{user.phone}</p>\n    <button\n      type=\"button\"\n      onClick={onClear}\n    >\n      Clear\n    </button>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n  onClear: PropTypes.func.isRequired,\n};\n","const API_TODOS_URL = `https://mate-api.herokuapp.com/todos`;\nconst API_USERS_URL = `https://mate-api.herokuapp.com/users`;\n\nexport const getTodos = () => (\n  fetch(API_TODOS_URL)\n    .then(response => response.json())\n);\n\nexport const getUser = userId => fetch(`${API_USERS_URL}/${userId}`)\n  .then(response => response.json());\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos, getUser } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    preparedTodos: [],\n    selectedUserId: 0,\n    user: [],\n  };\n\n  componentDidMount = () => {\n    getTodos()\n      .then(todos => (\n        this.setState({\n          todos: todos.data,\n          preparedTodos: todos.data,\n        })\n      ));\n  }\n\n  componentDidUpdate = () => {\n    if (this.state.selectedUserId !== 0\n      && this.state.selectedUserId !== this.state.user.id) {\n      getUser(this.state.selectedUserId)\n        .then((user) => {\n          this.setState({ user: user.data });\n        });\n    }\n  }\n\n  selectUser = (id) => {\n    this.setState({ selectedUserId: id });\n  }\n\n  onClear = () => {\n    this.setState({\n      user: [],\n      selectedUserId: 0,\n    });\n  }\n\n  filterByTitle = (query) => {\n    this.setState(state => ({\n      preparedTodos: [...state.todos].filter(todo => (todo.title\n        ? todo.title.includes(query)\n        : '')),\n    }));\n  }\n\n  filterByCompleted = (event) => {\n    if (event.target.value === 'completed') {\n      this.setState(state => ({\n        preparedTodos: [...state.todos].filter(todo => todo.completed),\n      }));\n    } else if (event.target.value === 'active') {\n      this.setState(state => ({\n        preparedTodos: [...state.todos].filter(todo => !todo.completed),\n      }));\n    } else {\n      this.setState(state => ({\n        preparedTodos: [...state.todos],\n      }));\n    }\n  }\n\n  render() {\n    const { preparedTodos, selectedUserId, user } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={preparedTodos}\n            selectUser={this.selectUser}\n            filterByTitle={this.filterByTitle}\n            filterByCompleted={this.filterByCompleted}\n            onComplete={this.onComplete}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                onClear={this.onClear}\n                user={user}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}